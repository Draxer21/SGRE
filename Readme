# SGRE - Sistema de Gestion de Reservas y Eventos

Proyecto de integracion de Ingenieria en Informatica (INACAP 2025).

## Stack principal

- **Frontend:** React 18 + Vite, React Router, Axios.
- **Backend:** Django 5 + Django REST Framework.
- **Base de datos:** PostgreSQL 15.
- **Documentacion de API:** drf-spectacular (Swagger / Redoc).

## Arquitectura

### Frontend (React)

- Codigo fuente en `frontend/src`.
- Vite se usa para desarrollo (`npm run dev`) y construccion (`npm run build`).
- El build queda en `frontend/dist`; Django lo sirve como archivos estaticos en despliegue.
- Proxy de desarrollo configurado para reenviar `/api/*` a `http://localhost:8000`.

Paginas iniciales implementadas:

- `/dashboard`: panel general con resumen de eventos, reservas e indicadores.
- `/eventos`: listado de eventos con su estado.
- `/reservas`: reservas registradas.
- `/reportes`: reportes administrativos publicados o en borrador.

### Backend (Django + DRF)

- Proyecto ubicado en `backend/`.
- Rutas `api/` exponen CRUD para eventos, reservas y reportes.
- Endpoint `api/dashboard/overview/` entrega los datos resumidos que consume el panel React.
- CORS habilitado para `http://localhost:5173` con cookies compartidas (sesiones Django).

### Estructura relevante

```
SGRE/
├── backend/
│   ├── municipal_backend/
│   │   ├── api_router.py        # DefaultRouter con viewsets
│   │   ├── api_views.py         # Dashboards agregados
│   │   ├── settings.py
│   │   └── urls.py
│   ├── eventos/api.py           # Serializer + ViewSet
│   ├── reservas/api.py
│   └── reportes/api.py
├── frontend/
│   ├── src/
│   │   ├── App.jsx
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── pages/
│   │   └── services/
│   ├── package.json
│   └── vite.config.js
└── requirements.txt
```

## Puesta en marcha local

### Backend (Django)

1. Crear y activar entorno virtual (ejemplo con PowerShell):
   ```
   py -3 -m venv .venv
   .\.venv\Scripts\Activate.ps1
   ```
2. Instalar dependencias:
   ```
   pip install -r requirements.txt
   ```
3. Configurar variables en `.env` (opcional, ver `settings.py` para valores por defecto).
4. Ejecutar migraciones y cargar datos necesarios:
   ```
   python manage.py migrate
   python manage.py createsuperuser  # si se requiere acceso admin
   ```
5. Servir API:
   ```
   python manage.py runserver
   ```

### Frontend (React)

1. Instalar Node.js 20 LTS (recomendado).
2. Instalar dependencias del proyecto:
   ```
   cd frontend
   npm install
   ```
3. Ejecutar modo desarrollo (abre http://localhost:5173):
   ```
   npm run dev
   ```
4. Construir artefactos para produccion (salida en `frontend/dist`):
   ```
   npm run build
   ```
   Django detecta automaticamente la carpeta `dist` y la sirve como estaticos cuando existe.

## Endpoints principales

- `GET /api/dashboard/overview/` resumen para el panel React.
- `GET|POST /api/eventos/` y `GET|PUT|PATCH|DELETE /api/eventos/{id}/`.
- `GET|POST /api/reservas/` y `GET|PUT|PATCH|DELETE /api/reservas/{id}/`.
- `GET|POST /api/reportes/` y `GET|PUT|PATCH|DELETE /api/reportes/{id}/`.
- `GET /api/schema/` OpenAPI, `GET /api/docs/` Swagger UI.

Los viewsets soportan filtros (`?estado=confirmado`, `?fecha=2025-07-01`), busqueda (`?search=feria`) y orden (`?ordering=-fecha`).

## Consideraciones de despliegue

- Definir la variable de entorno `FRONTEND_ORIGIN` con la URL publicada del frontend (ej. `https://sgre.municipio.cl`) para CORS y CSRF.
- Ejecutar `npm run build` durante el pipeline de despliegue y publicar `frontend/dist`.
- Habilitar `whitenoise` u otro mecanismo de estaticos si se sirve desde Django/Gunicorn.
- Revisar `REST_FRAMEWORK` si se necesita endurecer permisos para endpoints publicos.

## Tareas futuras sugeridas

1. Implementar autenticacion en el frontend (mantenemos session auth de Django).
2. Anadir formularios React para crear/editar eventos y reservas.
3. Automatizar build frontend en el pipeline CI/CD.
4. Completar modulo de notificaciones (modelo y endpoints).
